{"version":3,"sources":["utils/Utils.js","store/use-counter.js","pages/counter/Counter.js","pages/to-do-list/ToDoList.js","App.js","serviceWorker.js","index.js"],"names":["clone","item","JSON","parse","stringify","useMergedState","initialState","useClone","arguments","length","undefined","useReducer","state","partialNewState","Object","objectSpread","useCounterState","createPersistedState","useUserState","useCounter","initialCount","_useCounterState","_useCounterState2","slicedToArray","count","setCount","_useUserState","firstName","lastName","_useUserState2","user","setUser","changeName","prevState","increment","currentCount","decrement","reset","Counter","_ref","startAt","_useCounter","react_default","a","createElement","className","onClick","evt","defaultProps","ToDoList","title","score","_useGlobal","useGlobal","_useGlobal2","globalState","_useMergedState","list","id","completed","userName","allCompleted","_useMergedState2","toDoListState","setToDoListState","_useMergedState3","shoppingList","product","qty","_useMergedState4","_useState","useState","org","name","location","age","_useState2","setState","useEffect","console","log","reactn_default","reactn","counter_Counter","map","itemIndex","key","markCompleted","toggleCompleted","petName","animal","App","appState","setAppState","to_do_list_ToDoList","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2QAGMA,EAAQ,SAAAC,GAAI,OAAIC,KAAKC,MAAMD,KAAKE,UAAUH,KAE1CI,EAAiB,SAACC,GAAD,IAAeC,IAAfC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,UACnBG,qBAAW,SAACC,EAAOC,GACf,OAAON,EAAWP,EAAMc,OAAAC,EAAA,EAAAD,CAAA,GAAKF,EAAUC,IAAxBC,OAAAC,EAAA,EAAAD,CAAA,GAAkDF,EAAUC,IAC5EP,yBCNDU,EAAkBC,YAAqB,SACvCC,EAAeD,YAAqB,QAmB3BE,EAjBI,SAAAC,GAAgB,IAAAC,EACLL,EAAgBI,GADXE,EAAAR,OAAAS,EAAA,EAAAT,CAAAO,EAAA,GACxBG,EADwBF,EAAA,GACjBG,EADiBH,EAAA,GAAAI,EAEPR,EAAa,CACjCS,UAAW,OACXC,SAAU,UAJiBC,EAAAf,OAAAS,EAAA,EAAAT,CAAAY,EAAA,GAExBI,EAFwBD,EAAA,GAElBE,EAFkBF,EAAA,GAO/B,MAAO,CACHC,OACAE,WAAY,SAACL,EAAWC,GAAZ,OAAyBG,EAAQ,SAACE,GAAD,MAAgB,CAAEN,YAAWC,eAC1EJ,QACAU,UAAW,kBAAMT,EAAS,SAAAU,GAAY,OAAIA,EAAe,KACzDC,UAAW,kBAAMX,EAAS,SAAAU,GAAY,OAAIA,EAAe,KACzDE,MAAO,kBAAMZ,EAAS,SAAAU,GAAY,OAAIf,OCbxCkB,EAAU,SAAAC,GAAe,IAAbC,EAAaD,EAAbC,QAAaC,EAEoCtB,EAAWqB,GAAnEhB,EAFoBiB,EAEpBjB,MAAOU,EAFaO,EAEbP,UAAWE,EAFEK,EAEFL,UAAWC,EAFTI,EAESJ,MAAOP,EAFhBW,EAEgBX,KAAME,EAFtBS,EAEsBT,WAEjD,OACIU,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,UAAkCrB,GAClCkB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,SAAiCf,EAAKH,UAAtC,IAAkDG,EAAKF,UACvDc,EAAAC,EAAAC,cAAA,UAAQC,UAAU,uBAAuBC,QAASZ,GAAlD,aAGAQ,EAAAC,EAAAC,cAAA,UAAQC,UAAU,uBAAuBC,QAASV,GAAlD,aAGAM,EAAAC,EAAAC,cAAA,UAAQC,UAAU,yBAAyBC,QAAST,GAApD,SAGAK,EAAAC,EAAAC,cAAA,UAAQC,UAAU,yBAAyBC,QAAS,SAACC,GAAUf,EAAW,MAAO,WAAjF,0BAYhBM,EAAQU,aAAe,CACnBR,QAAS,GAGEF,QCjCTW,EAAW,SAAAV,GAAoB,IAAlBW,EAAkBX,EAAlBW,MAAOC,EAAWZ,EAAXY,MAAWC,EAUKC,sBAVLC,EAAAxC,OAAAS,EAAA,EAAAT,CAAAsC,EAAA,GAU1BG,EAV0BD,EAAA,GAAAE,GAAAF,EAAA,GAYSjD,EAAe,CAErDoD,KAAM,CACF,CACIC,GAAI,EACJR,MAAO,WACPS,WAAW,GAEf,CACID,GAAI,EACJR,MAAO,eACPS,WAAW,GAEf,CACID,GAAI,EACJR,MAAO,cACPS,WAAW,GAEf,CACID,GAAI,EACJR,MAAO,gBACPS,WAAW,IAGnBC,SAAU,GACVC,cAAc,KArCeC,EAAAhD,OAAAS,EAAA,EAAAT,CAAA0C,EAAA,GAY1BO,EAZ0BD,EAAA,GAYXE,EAZWF,EAAA,GAAAG,EAwCS5D,EAAe,CACrD6D,aAAc,CACV,CACIR,GAAI,EACJS,QAAS,QACTC,IAAK,MA7CgBC,EAAAvD,OAAAS,EAAA,EAAAT,CAAAmD,EAAA,GAAAK,GAAAD,EAAA,GAAAA,EAAA,GAkDPE,mBAAS,CAC/BC,IAjDU,CACVC,KAAM,SACNC,SAAU,YAgDVD,KAAM,OACNE,IAAK,MArDwBC,EAAA9D,OAAAS,EAAA,EAAAT,CAAAwD,EAAA,GAkD1B1D,EAlD0BgE,EAAA,GAkDnBC,EAlDmBD,EAAA,GAwDjCE,oBAAU,WAMN,OALAC,QAAQC,IAAI,uBACZD,QAAQC,IAAI7B,GAEZa,EAAiB,CAACJ,SAAU,eAErB,SAACb,GACJgC,QAAQC,IAAI,uBAEjB,CAAC7B,EAAOa,IAoBX,OACIiB,EAAAtC,EAAAC,cAACsC,EAAA,SAAD,KAEID,EAAAtC,EAAAC,cAAA,OAAKC,UAAU,QAEXoC,EAAAtC,EAAAC,cAAA,OAAKC,UAAU,QACXoC,EAAAtC,EAAAC,cAAA,qOAKJqC,EAAAtC,EAAAC,cAAA,OAAKC,UAAU,QACXoC,EAAAtC,EAAAC,cAACuC,EAAD,CAAS3C,QAAS,KAEtByC,EAAAtC,EAAAC,cAAA,OAAKC,UAAU,QACXoC,EAAAtC,EAAAC,cAACuC,EAAD,CAAS3C,QAAS,QAK1ByC,EAAAtC,EAAAC,cAAA,OAAKC,UAAU,IACXoC,EAAAtC,EAAAC,cAAA,mBAAWhC,EAAM6D,MACjBQ,EAAAtC,EAAAC,cAAA,kBAAUhC,EAAM+D,KAChBM,EAAAtC,EAAAC,cAAA,kBAAUhC,EAAM4D,IAAIC,MACpBQ,EAAAtC,EAAAC,cAAA,uBAAehC,EAAM4D,IAAIE,UACzBO,EAAAtC,EAAAC,cAAA,OAAKC,UAAU,IACXoC,EAAAtC,EAAAC,cAAA,UAAQC,UAAU,oBAAoBC,QAAS,SAACC,GAE5C8B,EAAS,SAAC5C,GAMN,OAAOnB,OAAAC,EAAA,EAAAD,CAAA,GAAImB,EAAX,CAAsBwC,KAAM,aARpC,qBAiBRQ,EAAAtC,EAAAC,cAAA,WAAKqC,EAAAtC,EAAAC,cAAA,WAAKqC,EAAAtC,EAAAC,cAAA,WAGVqC,EAAAtC,EAAAC,cAAA,OAAKC,UAAU,IACXoC,EAAAtC,EAAAC,cAAA,UAAKM,EAAL,OAAgBa,EAAcH,SAA9B,KAA0CG,EAAcN,KAAKhD,QAC7DwE,EAAAtC,EAAAC,cAAA,UACKmB,EAAcN,KAAK2B,IAAI,SAACnF,EAAMoF,GAAP,OACpBJ,EAAAtC,EAAAC,cAAA,MAAI0C,IAAKD,EAAWxC,UAAU,QACzB5C,EAAKiD,MADV,IACkBjD,EAAK0D,UAAYsB,EAAAtC,EAAAC,cAAA,QAAMC,UAAU,QAAhB,eAC/BoC,EAAAtC,EAAAC,cAAA,UAAQC,UAAU,yBAAyBC,QAAS,SAACC,IAtEvD,SAACsC,GACnB,IAAM5B,EAAOzD,EAAM+D,EAAcN,MAEjCA,EAAK4B,GAAW1B,WAAY,EAC5BK,EAAiB,CACbP,SAkEoB8B,CAAcF,KADlB,kBAGAJ,EAAAtC,EAAAC,cAAA,UAAQC,UAAU,yBAAyBC,QAAS,SAACC,IAhErD,SAACsC,GACrB,IAAM5B,EAAOzD,EAAM+D,EAAcN,MACjCA,EAAK4B,GAAW1B,WAAaF,EAAK4B,GAAW1B,UAE7CK,EAAiB,CACbP,SA4DoB+B,CAAgBH,KADpB,wBAOZJ,EAAAtC,EAAAC,cAAA,OAAKC,UAAU,QACXoC,EAAAtC,EAAAC,cAAA,kBAAUW,EAAYkC,QAAtB,SAAqClC,EAAYmC,UAIzDT,EAAAtC,EAAAC,cAAA,OAAKC,UAAU,KAEAoC,EAAAtC,EAAAC,cAAA,OAAKC,UAAU,IAAf,UACCoC,EAAAtC,EAAAC,cAAA,OAAKC,UAAU,IAAf,WACFoC,EAAAtC,EAAAC,cAAA,OAAKC,UAAU,IAAf,QACFoC,EAAAtC,EAAAC,cAAA,OAAKC,UAAU,IAAIU,EAAYkC,UAE3BR,EAAAtC,EAAAC,cAAA,OAAKC,UAAU,IAAf,UACAoC,EAAAtC,EAAAC,cAAA,OAAKC,UAAU,IAAf,UACJoC,EAAAtC,EAAAC,cAAA,OAAKC,UAAU,IAAIU,EAAYmC,aAavDzC,EAASD,aAAe,CACpBE,MAAO,GACPC,MAAO,GAGIF,QClJA0C,MAjCf,WAAe,IAAAvC,EAEqBC,sBAFrBC,EAAAxC,OAAAS,EAAA,EAAAT,CAAAsC,EAAA,GAEJwC,EAFItC,EAAA,GAEMuC,EAFNvC,EAAA,GAIXwB,oBAAU,SAAC/B,GACP8C,EAAY,CACRJ,QAAS,SACTC,OAAQ,UAPL,IAAAlC,EAWenD,EAAe,CACrC6C,MAAO,wBACPC,MAAO,IAbAW,EAAAhD,OAAAS,EAAA,EAAAT,CAAA0C,EAAA,GAWJ5C,EAXIkD,EAAA,GAWGe,EAXHf,EAAA,GAgBX,OACImB,EAAAtC,EAAAC,cAAA,OAAKC,UAAU,OACXoC,EAAAtC,EAAAC,cAAA,OAAKC,UAAU,uBAAf,UACYjC,EAAMuC,OAElB8B,EAAAtC,EAAAC,cAAA,OAAKC,UAAU,QACXoC,EAAAtC,EAAAC,cAAA,UAAQC,UAAU,uBAAuBC,QAAS,SAACC,GAAU8B,EAAS,CAAE1B,MAAOvC,EAAMuC,MAAQ,MAA7F,mBACA8B,EAAAtC,EAAAC,cAAA,UAAQC,UAAU,uBAAuBC,QAAS,SAACC,GAAU8B,EAAS,CAAE3B,MAAO,yBAA/E,iBAEJ+B,EAAAtC,EAAAC,cAAA,OAAKC,UAAU,QAAf,QACU+C,EAASH,QADnB,qDAGC7E,EAAMuC,MAAQ,GAAK8B,EAAAtC,EAAAC,cAACkD,EAAD,CAAU5C,MAAOtC,EAAMsC,MAAOC,MAAOvC,EAAMuC,UCtBvD4C,QACW,cAA7BC,OAAOtB,SAASuB,UAEe,UAA7BD,OAAOtB,SAASuB,UAEhBD,OAAOtB,SAASuB,SAASC,MACvB,2DCZNC,IAASC,OAAO1D,EAAAC,EAAAC,cAACyD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4b033287.chunk.js","sourcesContent":["import { useReducer } from 'reactn'\n// import merge from 'deepmerge'\n\nconst clone = item => JSON.parse(JSON.stringify(item))\n\nconst useMergedState = (initialState, useClone = true) =>\n    useReducer((state, partialNewState) => {\n        return useClone ? clone({ ...state, ...partialNewState }) : { ...state, ...partialNewState }\n    }, initialState)\n\nconst polarToCartesian = (centerX, centerY, radius, angleInDegrees) => {\n    const angleInRadians = ((angleInDegrees - 90) * Math.PI) / 180.0\n\n    return {\n        x: centerX + radius * Math.cos(angleInRadians),\n        y: centerY + radius * Math.sin(angleInRadians),\n    }\n}\n\nconst describeArc = (x, y, radius, startAngle, endAngle) => {\n    const start = polarToCartesian(x, y, radius, endAngle)\n    const end = polarToCartesian(x, y, radius, startAngle)\n\n    const largeArcFlag = endAngle - startAngle <= 180 ? '0' : '1'\n\n    return ['M', start.x, start.y, 'A', radius, radius, 0, largeArcFlag, 0, end.x, end.y].join(' ')\n}\n\nexport { clone, describeArc, polarToCartesian, useMergedState }\n","import createPersistedState from 'use-persisted-state'\n\nconst useCounterState = createPersistedState('count')\nconst useUserState = createPersistedState('user')\n\nconst useCounter = initialCount => {\n    const [count, setCount] = useCounterState(initialCount)\n    const [user, setUser] = useUserState({\n        firstName: 'John',\n        lastName: 'Smith',\n    })\n\n    return {\n        user,\n        changeName: (firstName, lastName) => setUser((prevState) => ({ firstName, lastName })),\n        count,\n        increment: () => setCount(currentCount => currentCount + 1),\n        decrement: () => setCount(currentCount => currentCount - 1),\n        reset: () => setCount(currentCount => initialCount),\n    }\n}\n\nexport default useCounter","/* eslint no-script-url: 0, jsx-a11y/anchor-is-valid: 0 */\nimport React, {Fragment} from 'react'\nimport {PropTypes} from 'prop-types'\nimport useCounter from '../../store/use-counter'\n\nconst Counter = ({startAt}) => {\n\n    const {count, increment, decrement, reset, user, changeName} = useCounter(startAt)\n\n    return (\n        <div className=\"border p-3\">\n            <div className=\"d-flex bg-light\">\n                <h3 className=\"mr-3 mb-0\">Count: {count}</h3>\n                <h3 className=\"mr-3 mb-0\">User: {user.firstName} {user.lastName}</h3>\n                <button className=\"btn btn-primary mr-3\" onClick={increment}>\n                    Increment\n                </button>\n                <button className=\"btn btn-primary mr-3\" onClick={decrement}>\n                    Decrement\n                </button>\n                <button className=\"btn btn-secondary mr-3\" onClick={reset}>\n                    Reset\n                </button>\n                <button className=\"btn btn-secondary mr-3\" onClick={(evt) => { changeName('Bob', 'Jones') }}>\n                    Change Name of User\n                </button>\n            </div>\n        </div>\n    )\n}\n\nCounter.propTypes = {\n    startAt: PropTypes.number.isRequired\n}\n\nCounter.defaultProps = {\n    startAt: 0\n}\n\nexport default Counter","/* eslint no-script-url: 0, jsx-a11y/anchor-is-valid: 0 */\nimport React, {Fragment, useEffect, useGlobal, useState} from 'reactn'\nimport {PropTypes} from 'prop-types'\nimport {clone, useMergedState} from '../../utils/Utils'\nimport Counter from '../counter/Counter'\n\nconst ToDoList = ({title, score}) => {\n\n    const myOrg = {\n        name: 'ApexCo',\n        location: 'Bethesda',\n    }\n\n    const fruits = ['apple', 'banana', 'pear', 'grapes', 'orange',]\n    const selectedFruit = 'orange'\n\n    const [globalState, setGlobalState] = useGlobal()\n\n    const [toDoListState, setToDoListState] = useMergedState({\n        // title: 'My Awesome To Do List',\n        list: [\n            {\n                id: 0,\n                title: 'Get milk',\n                completed: false,\n            },\n            {\n                id: 1,\n                title: 'Feed the dog',\n                completed: false,\n            },\n            {\n                id: 2,\n                title: 'Read a book',\n                completed: true,\n            },\n            {\n                id: 3,\n                title: 'Watch Netflix',\n                completed: false,\n            },\n        ],\n        userName: '',\n        allCompleted: false,\n    })\n\n    const [shoppingState, setShoppingState] = useMergedState({\n        shoppingList: [\n            {\n                id: 0,\n                product: 'Shoes',\n                qty: 1,\n            },\n        ],\n    })\n\n    const [state, setState] = useState({\n        org: myOrg,\n        name: 'John',\n        age: 42\n    })\n\n    useEffect(() => {\n        console.log('useEffect called = ')\n        console.log(score)\n\n        setToDoListState({userName: 'John Smith'})\n\n        return (evt) => {\n            console.log('Clean up happened')\n        }\n    }, [score, setToDoListState])\n\n    const markCompleted = (itemIndex) => {\n        const list = clone(toDoListState.list)\n        // list[itemIndex].completed = !list[itemIndex].completed\n        list[itemIndex].completed = true\n        setToDoListState({\n            list\n        })\n    }\n\n    const toggleCompleted = (itemIndex) => {\n        const list = clone(toDoListState.list)\n        list[itemIndex].completed = !list[itemIndex].completed\n        // list[itemIndex].completed = true\n        setToDoListState({\n            list\n        })\n    }\n\n    return (\n        <Fragment>\n\n            <div className=\"mb-3\">\n\n                <div className=\"mb-3\">\n                    <div>The Counters below uses usePersistedState to save the state in localStorage. So the count will\n                        be retained even after refresh. Also, the counts of both counters will be in sync, even across\n                        different browser tabs.\n                    </div>\n                </div>\n                <div className=\"mb-3\">\n                    <Counter startAt={1}/>\n                </div>\n                <div className=\"mb-3\">\n                    <Counter startAt={100}/>\n                </div>\n            </div>\n\n            {/* Example of useState() */}\n            <div className=\"\">\n                <h1>Name: {state.name}</h1>\n                <h1>Age: {state.age}</h1>\n                <h1>Org: {state.org.name}</h1>\n                <h1>Location: {state.org.location}</h1>\n                <div className=\"\">\n                    <button className=\"btn btn-secondary\" onClick={(evt) => {\n\n                        setState((prevState) => {\n                            /*const newState = clone(prevState)\n                            newState.name = 'Mary'\n                            myOrg.location = 'Bangalore'\n                            return newState*/\n\n                            return {...prevState, name: 'Mary'}\n                        })\n\n                        // setState({name: 'Mary'})\n                    }}>Call setState()\n                    </button>\n                </div>\n            </div>\n\n            <br/><br/><br/>\n\n            {/* Example of useMergedState() */}\n            <div className=\"\">\n                <h2>{title} of {toDoListState.userName}: {toDoListState.list.length}</h2>\n                <ul>\n                    {toDoListState.list.map((item, itemIndex) =>\n                        <li key={itemIndex} className=\"mb-2\">\n                            {item.title} {item.completed ? <span className=\"mr-2\">- Completed</span> :\n                            <button className=\"btn btn-secondary mr-2\" onClick={(evt) => {\n                                markCompleted(itemIndex)\n                            }}>Mark completed</button>}\n                            <button className=\"btn btn-secondary mr-2\" onClick={(evt) => {\n                                toggleCompleted(itemIndex)\n                            }}>Toggle completed\n                            </button>\n                        </li>\n                    )}\n                </ul>\n                <div className=\"mt-3\">\n                    <h3>Pet: {globalState.petName} is a {globalState.animal}</h3>\n                </div>\n            </div>\n\n            <div className=\"\">\n                {{\n                    apple: <div className=\"\">Apples</div>,\n                    banana: <div className=\"\">Bananas</div>,\n                    pear: <div className=\"\">Pears\n                        <div className=\"\">{globalState.petName}</div>\n                    </div>,\n                    grapes: <div className=\"\">Grapes</div>,\n                    orange: <div className=\"\">Oranges\n                        <div className=\"\">{globalState.animal}</div>\n                    </div>\n                }[selectedFruit]}\n            </div>\n        </Fragment>\n    )\n}\n\nToDoList.propTypes = {\n    title: PropTypes.string.isRequired,\n    score: PropTypes.number,\n}\n\nToDoList.defaultProps = {\n    title: '',\n    score: 0\n}\n\nexport default ToDoList","import React, {useEffect, useGlobal} from 'reactn';\nimport {useMergedState} from './utils/Utils'\nimport './App.css';\nimport './assets/scss/main.scss'\nimport ToDoList from './pages/to-do-list/ToDoList'\n\nfunction App() {\n\n    const [appState, setAppState] = useGlobal()\n\n    useEffect((evt) => {\n        setAppState({\n            petName: 'Toffee',\n            animal: 'dog',\n        })\n    })\n\n    const [state, setState] = useMergedState({\n        title: 'My Awesome To Do List',\n        score: 0\n    })\n\n    return (\n        <div className=\"App\">\n            <div className=\"alert alert-success\">\n                Score: {state.score}\n            </div>\n            <div className=\"mb-3\">\n                <button className=\"btn btn-primary mr-2\" onClick={(evt) => { setState({ score: state.score + 1}) }}>Increment Score</button>\n                <button className=\"btn btn-primary mr-2\" onClick={(evt) => { setState({ title: 'Another To Do List'}) }}>Change Title</button>\n            </div>\n            <div className=\"mb-3\">\n                Pet: {appState.petName} - This is coming from the global state into App.\n            </div>\n            {state.score < 5 && <ToDoList title={state.title} score={state.score} />}\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}